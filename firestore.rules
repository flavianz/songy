rules_version = '2';

service cloud.firestore {
    match /databases/{database}/documents {
        function isSignedIn() {
            return request.auth != null && request.auth.token.email_verified;
        }
        match /users/{userDoc} {
            allow write: if isSignedIn() && request.auth.uid == request.resource.data.uid &&
                    request.resource.data.keys().hasOnly(["uid", "username", "level", "lobby"]);
            allow read: if isSignedIn() && request.auth.uid == resource.data.uid;
        }

        match /lobbies/{lobbyDoc} {
            function isHost() {
                return resource.data.host == request.auth.uid;
            }

            allow read: if isSignedIn();
            allow create: if isSignedIn() &&
                    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.lobby == "";
            allow update: if isSignedIn() && request.resource.data.host == resource.data.host
                    && request.resource.data.players.size() <= request.resource.data.max_players
                    && (isHost() || (request.resource.data.max_players == resource.data.max_players
                        && request.resource.data.state == resource.data.state));
            allow delete: if isSignedIn() && resource.data.players.size() <= 1;
        }

        match /games/{gamesDoc} {
            function isHostingLobby() {
                let userPath = /databases/$(database)/documents/users/$(request.auth.uid);
                let lobbyPath = /databases/$(database)/documents/lobbies/$(get(userPath).data.lobby);

                let isInLobby = get(userPath).data.lobby != "";
                let isLobbyHost = get(lobbyPath).data.host == request.auth.uid;
                return isInLobby && isLobbyHost;
            }
            allow create: if isSignedIn() && isHostingLobby();
            allow read: if isSignedIn() && resource.data.players.keys().hasAll([request.auth.uid]);
        }
    }
}