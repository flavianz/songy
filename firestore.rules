rules_version = '2';
// TODO: recheck and fix all rules; this is only dev state
service cloud.firestore {
    match /databases/{database}/documents {
        function isSignedIn() {
            return request.auth != null && request.auth.token.email_verified;
        }
        match /users/{userDoc} {
            allow write: if isSignedIn() && request.auth.uid == request.resource.data.uid &&
                    request.resource.data.keys().hasOnly(["uid", "username", "level", "lobby"]);
            allow read: if isSignedIn() && request.auth.uid == resource.data.uid;
        }

        match /lobbies/{lobbyDoc} {
            function isHost() {
                return resource.data.host == request.auth.uid;
            }

            allow read: if isSignedIn();
            allow create: if isSignedIn() &&
                    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.lobby == "";
            allow update: if isSignedIn() && request.resource.data.host == resource.data.host
                    && request.resource.data.players.size() <= request.resource.data.max_players
                    && (isHost() || (request.resource.data.max_players == resource.data.max_players
                        && request.resource.data.game == resource.data.game));
            allow delete: if isSignedIn() && resource.data.players.size() <= 1;
        }

        match /games/{gamesDoc} {
            allow read: if isSignedIn() && request.auth.uid in resource.data.players.keys();

            match /guesses/{guessDoc} {
                function isValidGuess(guess) {
                    return guess.album is string && guess.author is string && guess.release is int && guess.title is string;
                }
                function onlyChangedHimself(request, resource) {
                    return request.resource.data.diff(resource.data).changedKeys().hasOnly([request.auth.uid]);
                }
                function isDuringRound() {
                    return get(/databases/$(database)/documents/games/$(gamesDoc)).data.curr_round == int(guessDoc);
                }
                function isFirstGuess(request, resource) {
                    return resource.data[request.auth.uid] == null;
                }

                allow update: if isSignedIn() && isValidGuess(request.resource.data[request.auth.uid])
                    && onlyChangedHimself(request, resource) && isDuringRound() && isFirstGuess(request, resource);
            }

            match /lyrics/{lyricsDoc} {
                function isReleased(request, gameDoc) {
                    return int(lyricsDoc) == gameDoc.data.curr_round ?
                            request.time.toMillis() >= gameDoc.data.round_start :
                            int(lyricsDoc) < gameDoc.data.curr_round;
                }

                allow read: if isSignedIn() && isReleased(request, get(/databases/$(database)/documents/games/$(gamesDoc)));
            }
        }
    }
}